{"version":3,"sources":["images/layer.png","images/model.png","components/header/AppHeader.jsx","components/footer/Footer.jsx","components/orientationmodal/OrietnationModal.jsx","content/semanticex/SemanticEx.jsx","content/modelex/ModelEx.jsx","content/algebraex/AlgebraEx.jsx","components/Main.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AppHeader","react_default","a","createElement","UIShell","aria-label","href","prefix","className","react_router_dom","exact","to","_20_default","app_switcher_20_default","Component","Footer","target","OrientationModalContent","abbreviateString","value","maxLength","length","substring","intlFormat","num","Intl","NumberFormat","format","Math","round","makeFriendly","abs","SemanticEx","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","modelDetails","require","similarityArray","name","layers","state","selecteddataset","selectedmodel","selectedsimimage","selectedlayer","selectedmetric","datasetsList","modelsList","distanceMetricList","showorientationmodal","updateSimilarity","document","title","prevProps","prevState","e","setState","getAttribute","console","log","similarityPath","process","loadedJSON","fetch","then","response","status","json","data","catch","err","self","_this2","datasetImageList","map","dsdata","index","iconPath","icon","key","toUpperCase","onClick","clickDatasetImage","bind","src","alt","indexvalue","modelImageList","mdata","clickModelImage","layerImageList","ldata","toLowerCase","clickLayerImage","metricImageList","metric","clickMetricImage","similarImagesList","alldata","widthVal","imagePath","similarityScore","toFixed","clickSimilarImage","style","width","selectedImagePath","Modal","open","size","passiveModal","primaryButtonText","secondaryButtonText","modalHeading","modalLabel","onRequestSubmit","toggleOrientationModal","ref","orientationModal","onRequestClose","OrietnationModal","layer_index","totallayers","type","paremtercount","ModelEx","pageIntro","Notification","kind","subtitle","minWidth","marginBottom","AlgebraEx","datasetslist","css","algebraIntro","alert","Main","header_AppHeader","react_router","path","component","id","footer_Footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","components_Main","getElementById","URL","origin","addEventListener","concat","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1be41a33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/layer.9952a8d0.png\";","module.exports = __webpack_public_path__ + \"static/media/model.20a139c6.png\";","import React, { Component } from \"react\";\nimport {\n  Header,\n  HeaderName,\n  HeaderNavigation,\n//   HeaderMenuItem,\n  HeaderGlobalBar,\n  HeaderGlobalAction,\n  SkipToContent,\n} from 'carbon-components-react/lib/components/UIShell';\n\nimport {\n      NavLink\n} from \"react-router-dom\";\n\nimport \"./header.css\"\nimport Notification20 from '@carbon/icons-react/lib/notification/20';\n// import UserAvatar20 from '@carbon/icons-react/lib/user--avatar/20';\nimport AppSwitcher20 from '@carbon/icons-react/lib/app-switcher/20';\n\nclass AppHeader extends Component {\n    render() {\n        return (\n            <div>\n                <Header aria-label=\"Convolutional Neural Network Playground\">\n                <SkipToContent />\n                <HeaderName href=\"/\" prefix=\"\">\n                ConvNet Playground\n                </HeaderName>\n                <HeaderNavigation aria-label=\"Convolutional Neural Network Playground\">\n                {/* <HeaderMenuItem element={Link} to=\"/\" className=\"navbarlink \"> Datasets </HeaderMenuItem> */}\n                {/* <HeaderMenuItem  element={Link} to=\"/models\" className=\"navbarlink \"> Models</HeaderMenuItem> */}\n                <div className=\"navbarlinks  \"><NavLink exact to=\"/\"> Semantic Search </NavLink></div>\n                <div className=\"navbarlinks \"><NavLink to=\"/models\"> Model Explorer </NavLink></div>\n                {/* <div className=\"navbarlinks \"><NavLink to=\"/algebra\"> Image Algebra </NavLink></div> */}\n                <div className=\"navbarlinks \"><NavLink to=\"/extra\"> Extras </NavLink></div>\n                </HeaderNavigation>\n                <HeaderGlobalBar>\n                <HeaderGlobalAction aria-label=\"Notifications\">\n                    <Notification20 />\n                </HeaderGlobalAction>\n               \n                {/* <HeaderGlobalAction aria-label=\"User Avatar\">\n                    <UserAvatar20 />\n                </HeaderGlobalAction> */}\n                <HeaderGlobalAction aria-label=\"App Switcher\">\n                    <AppSwitcher20 />\n                </HeaderGlobalAction>\n                </HeaderGlobalBar>\n            </Header>\n            <div> <br/> <br/>  <br/>  <br/> </div>\n            </div>\n            \n        );\n    }\n}\n\nexport default AppHeader;\n ","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div>\n                Made with <span className=\"redcolor\">&#9829;</span> at <a href=\"http://experiments.fastforwardlabs.com/\" target=\"blank\">Cloudera Fast Forward Labs</a>.\n            </div>\n        );\n    }\n}\n\nexport default Footer;","import React, { Component } from \"react\";\n\nclass OrientationModalContent extends Component {\n    render() {\n        return (\n            <div>\n                Convnet Playground is a research prototype by Clouderaa Fast Forward Labs, built to accompany our updated report on \n                Image Analysis. More about this report is described in our blog post.\n            \n                <div className=\"horrule mb10 pt10\"></div>\n                Convolutional Neural Networks (Convnets or CNNs) are deep neural networks that can learn hierarchical representations \n                useful for image analysis. Early layers in a CNN learn low level features (e.g. lines, edges, shapes, colours) \n                while later layers learn high level concepts (e.g eyes, legs, faces, doors etc) depending on the dataset used for training. \n                In Convnet Playground, features extracted using layers from a CNN are used for \n                semantic search (image retrieval based on similarity of extracted features). \n\n                To explore this prototype, the user can select a configuration (dataset, model, layer, distance metric) and then view \n                how these result in different image similarity rankings.\n\n                <div className=\"horrule mb10 pt10\"></div>\n\n                <div className=\"boldtext\"> Datasets </div>\n                [TinyImagenet] This dataset contains 64px * 64px images and is a subset of the Tiny Imagenet Visual Recognition Challenge dataset.\n                It consists of images from 10 categories (faces, shoes, teapots, goldfish, frogs, ..)\n                <br/>\n                [Iconic3k] This is a dataset collected from Flickr images (open attribution) of real world iconic images taken by users.\n                It contains images spanning 10 keyword searches (toyota corolla, volkswagen beetle, honda civic, tractors, bananna, pineapples, ..)\n\n                <div className=\"boldtext mt10\"> Models and Layers</div>\n                We provide 10 models and a selection of layers from each model. The user can then observe how these model + layer \n                configurations impact the similarity rankings for each image in a dataset.  \n              \n            </div>\n        );\n    }\n}\n\nexport default OrientationModalContent;","import React, { Component } from \"react\";\nimport { Modal } from 'carbon-components-react';\nimport Notification20 from '@carbon/icons-react/lib/notification/20';\nimport \"./semanticex.css\"\nimport OrientationModal from \"../../components/orientationmodal/OrietnationModal\"\n\nfunction abbreviateString(value, maxLength) {\n    if (value.length <= maxLength) {\n        return value\n    } else {\n        return value.substring(0, maxLength) + \" ..\"\n    }\n}\n\nfunction boundWidth(widthVal){\n    if (widthVal < 0){\n        return 0;\n    }else if (widthVal >1){\n        return 1;\n    }else {\n        return widthVal;\n    }\n}\n\nfunction intlFormat(num){\n  return new Intl.NumberFormat().format(Math.round(num*10)/10);\n}\nfunction makeFriendly(num){\n  if(num < 1 && num > 0){\n      return num\n  }\n  if( Math.abs( num) >= 1000000)\n    return intlFormat(num/1000000)+'M';\n  if(Math.abs(num) >= 1000)\n    return intlFormat(num/1000)+'k';\n  return intlFormat(num);\n}\n\nfunction loadJSONData(url) {\n     return fetch(url)\n        .then(\n            function (response) {\n                if (response.status !== 200) {\n                    console.log('Looks like there was a problem. Status Code: ' + response.status);\n                    return;\n                } \n                // Examine the text in the response\n                return response.json().then(function (data) { \n                    return data\n                });\n            }\n        )\n        .catch(function (err) {\n            console.log('Fetch Error :-S', err);\n        });\n}\n\nclass SemanticEx extends Component {\n    constructor(props) {\n        super(props);\n\n        const modelDetails = require('../../assets/semsearch/details.json');\n        // console.log (similarityArray)\n        const initialSimilarityPath = \"../../assets/semsearch/similarity/\" + modelDetails[\"datasets\"][0].name + \"/\" + modelDetails[\"models\"][0].name + \"/\" + modelDetails[\"metrics\"][0] + \"/\" + modelDetails[\"models\"][0].layers[0] + \".json\"\n        const similarityArray = require('../../assets/semsearch/similarity/cifar100/vgg16/cosine/block1_conv1.json');\n        // require('../../assets/semsearch/similarity/cifar100/vgg16/cosine/block5_pool.json');\n        // console.log(similarityArray)\n        \n        \n        this.state = {\n            selecteddataset: 0,\n            selectedmodel: 0,\n            selectedsimimage: 0,\n            selectedlayer: 0,\n            selectedmetric: 0,\n            similarityArray: similarityArray,\n            datasetsList: modelDetails[\"datasets\"],\n            modelsList: modelDetails[\"models\"],\n            distanceMetricList: modelDetails[\"metrics\"],\n            showorientationmodal: true\n        }\n        // setTimeout(() => {\n        this.updateSimilarity() \n        // }, 2000);\n       \n    }\n\n    componentDidMount() {\n        document.title = \"ConvNet Playground | Semantic Search Explorer\"; \n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if ( this.state.selectedmodel !== prevState.selectedmodel || this.state.selectedmetric !== prevState.selectedmetric || this.state.selectedlayer !== prevState.selectedlayer || this.state.selecteddataset !== prevState.selecteddataset) {\n            this.updateSimilarity()\n        }\n      }\n\n    clickDatasetImage(e) {\n        this.setState({ selecteddataset: e.target.getAttribute(\"indexvalue\") })\n        this.setState({ selectedmodel: 0 }) \n    }\n\n    clickModelImage(e) {\n        this.setState({ selectedmodel: e.target.getAttribute(\"indexvalue\") }) \n        this.setState({ selectedlayer: 0 }) \n    }\n\n    clickLayerImage(e) {\n        this.setState({ selectedlayer: e.target.getAttribute(\"indexvalue\") }) \n    }\n\n    clickMetricImage(e) {\n        this.setState({ selectedmetric: e.target.getAttribute(\"indexvalue\") }) \n    }\n\n    clickSimilarImage(e) {\n        this.setState({ selectedsimimage: e.target.getAttribute(\"indexvalue\") })\n        \n    }\n\n    toggleOrientationModal(e){\n        this.setState({showorientationmodal: !(this.state.showorientationmodal)})\n        console.log(this.state.showorientationmodal)\n    }\n     \n\n    updateSimilarity() {\n\n        let similarityPath = process.env.PUBLIC_URL +  \"/assets/semsearch/similarity/\" + this.state.datasetsList[this.state.selecteddataset].name + \"/\" + this.state.modelsList[this.state.selectedmodel].name + \"/\" + this.state.distanceMetricList[this.state.selectedmetric] + \"/\" + this.state.modelsList[this.state.selectedmodel].layers[this.state.selectedlayer].name + \".json\"\n        let loadedJSON =  loadJSONData(similarityPath)  \n        console.log(similarityPath)    \n        let self = this \n        loadedJSON.then(function(data){ \n            if(data){\n                self.setState({similarityArray:data}) \n            } \n        })\n\n    }\n\n\n    render() {\n        let datasetImageList = this.state.datasetsList.map((dsdata, index) => {\n            let iconPath = process.env.PUBLIC_URL + \"/assets/semsearch/images/\" + dsdata.icon\n    \n            return (\n                <div key={dsdata.name + \"fullbox\" + index} className=\"iblock datasetfullbox clickable mb10\">\n                    <div className=\"datasettitles\"> {dsdata.name.toUpperCase()}</div>\n                    <img onClick={this.clickDatasetImage.bind(this)} src={iconPath} alt=\"\" className={\"datasetbox rad2 \" + (this.state.selecteddataset == index ? \"active\" : \"\")} indexvalue={index} />\n                </div>\n            )\n        });\n\n\n        let modelImageList = this.state.modelsList.map((mdata, index) => {\n            return (\n                <div key={mdata.name + \"fullbox\" + index} className=\"iblock datasetfullbox clickable mb10 \">\n                    <div className=\"datasettitles\"> {mdata.name.toUpperCase()}</div>\n                    <img onClick={this.clickModelImage.bind(this)} src={require(\"../../images/model.png\")} alt=\"\" className={\"datasetbox rad2 \" + (this.state.selectedmodel == index ? \"active\" : \"\")} indexvalue={index} />\n                </div>\n            )\n        });\n\n        let layerImageList = this.state.modelsList[this.state.selectedmodel].layers.map((ldata, index) => {\n            \n            return (\n                <div key={ldata + \"fullbox\" + index} className=\"iblock datasetfullbox clickable mb10 \">\n                    <div className=\"datasettitles\"> {abbreviateString(ldata.name, 11).toLowerCase()}</div>\n                    <img onClick={this.clickLayerImage.bind(this)} src={require(\"../../images/layer.png\")} alt=\"\" className={\"datasetbox rad2 \" + (this.state.selectedlayer == index ? \"active\" : \"\")} indexvalue={index} />\n                </div>\n            )\n        });\n\n        let metricImageList = this.state.distanceMetricList.map((metric, index) => {\n            return (\n                <div key={metric + \"fullbox\" + index} className=\"iblock datasetfullbox clickable mb10 \">\n                    <div className=\"datasettitles\"> {abbreviateString(metric, 11).toLowerCase()}</div>\n                    <img onClick={this.clickMetricImage.bind(this)} src={require(\"../../images/layer.png\")} alt=\"\" className={\"datasetbox rad2 \" + (this.state.selectedmetric == index ? \"active\" : \"\")} indexvalue={index} />\n                </div>\n            )\n        });\n\n        // console.log(this.state.similarityArray[this.state.selectedsimimage]) \n       \n         \n        let similarImagesList = this.state.similarityArray[this.state.selectedsimimage].map((alldata, index) => {\n            let imagePath = process.env.PUBLIC_URL + \"/assets/semsearch/datasets/\" + this.state.datasetsList[this.state.selecteddataset].name + \"/\" + alldata[0] + \".jpg\"\n            // console.log(imagePath)\n            let similarityScore = (alldata[1] * 1).toFixed(3)\n            return (\n                <div key={alldata[0] + \"winper\"} className=\"iblock similarityfullbox mr5 mb5 positionrelative\">\n                    <img key={alldata[0] + \"image\" + alldata[0]} onClick={this.clickSimilarImage.bind(this)} src={imagePath} alt=\"\" className={\"simiimage clickable rad2 \"} indexvalue={alldata[0]} />\n                    <div className=\"outersimbar\">\n                        <div className=\"innersimbar\" style={{ width: (boundWidth(similarityScore) *100) + \"%\" }}></div>\n                    </div>\n                    <div className=\"similarityscorebox\">{ makeFriendly(similarityScore) } </div>\n                    {/* <div>{ \"w:\" + boundWidth(similarityScore)*100  }</div> */}\n                </div>\n            )\n        });\n       \n        \n\n        let semsearchIntro = `Layers in a trained convolutional neural network (CNN) can be used to extract features from images.\n        Semantic search explores the use these extracted features in computing the \"similarity\" between images.  `\n\n        let convnetLayer = `How do features extracted using different model architectures compare? What layers perform better and when?\n        What similarity distance metrics work best? This demo helps you investigate these questions!`\n\n        // let introHeight= \"8.5rem\"\n\n        let selectedImagePath = process.env.PUBLIC_URL + \"/assets/semsearch/datasets/\" + this.state.datasetsList[this.state.selecteddataset].name + \"/\" + this.state.selectedsimimage + \".jpg\"\n        // process.env.PUBLIC_URL + \"/assets/semsearch/datasets/cifar100/train/\" + this.state.selectedsimimage + \".jpg\"\n        return (\n            <div>\n\n                { (this.state.showorientationmodal) && <Modal className=\"orientationmodal\" \n                    open={true}\n                    size=\"lg\"\n                    // style={{maxWidth: '1600px', width: '100%'}}\n                    passiveModal={false}\n                    primaryButtonText = \"Get Started\"\n                    secondaryButtonText = \"Close\"\n                    modalHeading= \"Convnet Playground\"  \n                    modalLabel= \"Welcome!\"\n                    onRequestSubmit = {this.toggleOrientationModal.bind(this)}\n                    ref={(ref) => this.orientationModal = ref}\n                    onRequestClose = {this.toggleOrientationModal.bind(this)}\n                    >\n                    <OrientationModal></OrientationModal>\n                    \n                </Modal>} \n\n                <div className=\"pb10 \"> \n                    <div  className=\"iblock pb10 sectiontitle\">What is Semantic Search?</div>\n                    <div onClick= {this.toggleOrientationModal.bind(this)}  className=\"iblock  floatright  clickable showmodal\"> ? More Info  </div>\n                \n                </div>\n                <div className=\"horrule\"></div>\n                <div className=\"flex mt10\">\n                    <div className=\"flex5 mr10 mynotif lightbluehightlight p20\">\n                        <div className=\"boldtext mb10\"> Semantic Search</div>\n                        <div className=\"lh10\">{semsearchIntro}</div>\n                    </div>\n                    <div className=\"flex5  mynotif lightbluehightlight p20\">\n                        <div className=\"boldtext mb10\"> Model architectures and Layers</div>\n                        <div className=\"lh10\">{convnetLayer}</div>\n                    </div>\n\n                </div>\n\n                <div className=\"flex flexwrap\">\n                    <div className=\"flex2 mr10\">\n                        <div className=\"mt20 pb10 sectiontitle\" > Select Dataset </div>\n                        <div className=\"horrule mb10\"></div>\n                        <div className=\"datasetselectdiv\">\n                            {datasetImageList}\n                        </div>\n                        <div className=\" iblock boldtext  iblock boldtext datasetdescription  p10 lightbluehightlight\">{this.state.datasetsList[this.state.selecteddataset].name.toUpperCase()}</div>\n                    </div>\n                    <div className=\"flex3 mr10\">\n                        <div className=\"mt20 pb10 sectiontitle\" > Select Model </div>\n                        <div className=\"horrule mb10\"></div>\n                        <div className=\"datasetselectdiv\">\n                            {modelImageList}\n                        </div>\n                        <div className=\" iblock boldtext datasetdescription  p10 lightbluehightlight\">{this.state.modelsList[this.state.selectedmodel].name.toUpperCase()}</div>\n                    </div>\n                    <div className=\"flex3\">\n                        <div className=\"mt20 pb10 sectiontitle\" > Select Layer </div>\n                        <div className=\"horrule mb10\"></div>\n                        <div className=\"scrollwindow  \">\n                            <div className=\"windowcontent\"> {layerImageList} </div>\n                        </div>\n                        <div className=\"flex flexwrap \">\n                            <div className=\"flex1  mr10 \">\n                            <div className=\" iblock boldtext datasetdescription  p10 lightbluehightlight\"> {this.state.modelsList[this.state.selectedmodel].layers[this.state.selectedlayer].name.toUpperCase()}</div>\n                            </div>\n                            <div className=\"flex9 \">\n                                <div className=\"smalldesc boldtext pt4\"> Layer [ {this.state.modelsList[this.state.selectedmodel].layers[this.state.selectedlayer].layer_index }  of {this.state.modelsList[this.state.selectedmodel].layers[this.state.selectedlayer].totallayers }  ] {this.state.modelsList[this.state.selectedmodel].layers[this.state.selectedlayer].type } </div>\n                                <div className=\"smalldesc pt3\"> {makeFriendly(this.state.modelsList[this.state.selectedmodel].layers[this.state.selectedlayer].paremtercount)} trainable parameters </div>\n                            </div>\n                        </div>\n                        \n                    </div>\n\n                    <div className=\"flex2\">\n                        <div className=\"mt20 pb10 sectiontitle\" > Distance Metric </div>\n                        <div className=\"horrule mb10\"></div>\n                        <div className=\"scrollwindow  \">\n                            <div className=\"windowcontent\"> {metricImageList} </div>\n                        </div>\n                        <div className=\" iblock boldtext datasetdescription  p10 lightbluehightlight\"> {this.state.distanceMetricList[this.state.selectedmetric].toUpperCase()}</div>\n                    </div>\n\n                </div>\n\n\n                <div className=\"mt20 mb10 \">\n                    <div className=\"sectiontitle iblock mr10\"> Similarity search </div>\n                    <div className=\"iblock\"> Select and image.</div>\n                </div>\n                <div className=\"horrule mb10\"></div>\n                <div className=\"flex\">\n                    <div className=\"iblock  flex1 mr10\">\n                        <img src={selectedImagePath} className=\"mainsimilarityimage rad4  iblock\" alt=\"\" />\n                        <div className=\" mt10  boldtext datasetdescription  p10 lightbluehightlight\"> SEARCH IMAGE </div>\n                        {/* <div> searchimi number {this.state.selectedsimimage}</div> */}\n                    </div>\n                    <div className=\" flexfull\">\n                        <div className=\"mb10 mainsimilaritydesc lightbluehightlight p10\">\n                            Based on features extracted using <span className=\"boldtext\"> {this.state.modelsList[this.state.selectedmodel].name.toUpperCase()} </span>\n                            , layer <span className=\"boldtext\"> {this.state.modelsList[this.state.selectedmodel].layers[this.state.selectedlayer].name.toUpperCase()} </span>\n                            and  <span className=\" boldtext\"> COSINE </span> distance metric, the  images below are the most similar.\n\n                        </div>\n                        <div>{similarImagesList}</div>\n                    </div>\n                </div>\n                <br/>\n                <br/>\n                <br/>\n            </div>\n        );\n    }\n}\n\nexport default SemanticEx;","import React, { Component } from \"react\";\nimport { InlineNotification } from 'carbon-components-react';\n\nclass ModelEx extends Component {\n\n\n    constructor(props) {\n        super(props);\n\n \n\n        this.state = {\n             \n        }\n\n\n        this.pageIntro = ` Convolutional Neural Network models are comprised of layers which learn heirarchical \n        representations. What kind of representations or features does each layer learn? \n        Well, let us explore the following models. `\n\n\n    }\n\n    componentDidMount() {\n        document.title = \"ConvNet Playground | Model Explorer\";\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"pb10 sectiontitle\"> Model Explorer </div>\n                <div className=\"horrule\"></div>\n                <InlineNotification\n                    title={\"Image Algebra\"} \n                    kind={\"info\"} \n                    subtitle={this.pageIntro}\n                    style={{ minWidth: '100%', marginBottom: '.5rem' }}\n                />\n               \n\n\n                 \n            </div>\n        );\n    }\n}\n\nexport default ModelEx;","import React, { Component } from \"react\";\nimport { InlineNotification } from 'carbon-components-react';\nimport \"./algebraex.css\"\n \n\nclass AlgebraEx extends Component {\n\n    constructor(props) {\n        super(props);\n\n\n        this.datasetslist = [\n            { name: \"CIFAR100x\", css: \"active\" , index:[0]},        \n            { name: \"ICONIC3K\", css: \"\" },\n            { name: \"IMAGENET3K\", css: \"\" }\n        ]\n\n        this.state = {\n            selecteddataset: this.datasetslist[0]\n        }\n\n\n        this.algebraIntro = ` With Image Algebra, we take advantage of complex meaningful representations that \n        can be learned with ConvNets and use them as variables in simple and interesting algebra operations.\n        If we \"subtract\" the representation of the horizon with trees from the representation of just trees ..\n        is the resulting representation most similar to that of plain horizon? Well, lets find out.`\n\n    }\n\n    componentDidMount() {\n        document.title = \"ConvNet Playground | Image Algebra\";\n    }\n\n    clickDatasetImage() {\n        alert(\"click here\")\n\n    } \n\n\n    render() {\n        // let datasetImageList = this.datasetslist.map(dsdata => {\n        //     return (\n        //         <div className=\"iblock datasetfullbox clickable \">\n        //             <div className=\"datasettitles\"> {dsdata.name}</div>\n        //             <img key={dsdata} onClick={this.clickDatasetImage.bind(this)} src={require(\"../../images/0.jpg\")} alt=\"\" className={\"datasetbox rad2 \" + dsdata.css} />\n        //         </div>\n        //     )\n        // });\n\n        // let holdarray = Array.from(Array(50).keys());\n        // let allDatasetImageList = holdarray.map(dsdata => {\n        //     return (\n        //         <div className=\"iblock datasetfullbox \">\n        //             <div className=\"datasettitles\"> {dsdata.name}</div>\n        //             <img key={dsdata} onClick={this.clickDatasetImage.bind(this)} src={require(\"../../images/0.jpg\")} alt=\"\" className=\"datasetbox rad2 dsselected \" />\n        //         </div>\n        //     )\n        // });\n\n        return (\n            <div>\n                <div className=\"pb10 sectiontitle\"> Image Algebra</div>\n                <div className=\"horrule\"></div>\n                <InlineNotification\n                    title={\"Image Algebra\"} \n                    kind={\"info\"} \n                    subtitle={this.algebraIntro}\n                    style={{ minWidth: '100%', marginBottom: '.5rem' }}\n                />\n               \n\n\n                 \n            </div>\n        );\n    }\n}\n\nexport default AlgebraEx ","import React, { Component } from \"react\";  \nimport {\n    Route, \n    HashRouter\n} from \"react-router-dom\";\n \nimport \"./template.css\"\n \n// import Sidebar from \"./Sidebar\";\nimport AppHeader from \"./header/AppHeader\";\nimport Footer from \"./footer/Footer\";\nimport SemanticEx from \"../content/semanticex/SemanticEx\";\nimport ModelEx from \"../content/modelex/ModelEx\";\nimport AlgebraEx from \"../content/algebraex/AlgebraEx\"\n// import About from \"../sections/About\"\n// import Game from \"../sections/Game\"\n// import Doodle from \"../sections/Doodle\"\n// import VideoDemo from \"../sections/VideoDemo\"\n\n\n// ReactGA.initialize(\"UA-131578973-1\")\n// const history = createBrowserHistory({\n//     basename: \"\", // The base URL of the app (see below)\n//     forceRefresh: false, // Set true to force full page refreshes\n//     keyLength: 6, // The length of location.key\n//     // A function to use to confirm navigation with the user (see below)\n//     getUserConfirmation: (message, callback) => callback(window.confirm(message))\n// });\n// history.listen(location => {\n//     ReactGA.set({ page: location.hash })\n//     ReactGA.pageview(location.hash)\n//     // console.log(location.pathname, location.hash)\n// })\n\nclass Main extends Component {\n\n    componentDidMount() {\n        // ReactGA.pageview(window.location.hash)\n        // document.title = \"Image Analysis Explorer | Explore Convolutional Neural Nets for Imagee Analysis\";\n    }\n\n    render() {\n        return (\n            <HashRouter>\n                <AppHeader></AppHeader> \n                  <div className=\"container-fluid p10\">   \n                  <Route exact path=\"/\" component={SemanticEx} />\n                  <Route exact path=\"/datasets\" component={SemanticEx} />\n                  <Route exact path=\"/models\" component={ModelEx} />\n                  <Route exact path=\"/algebra\" component={AlgebraEx} />\n                            \n                  </div>\n                <div id=\"footer\"> <Footer /> </div>\n            </HashRouter>\n\n        );\n    }\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./components/Main\"; \nimport * as serviceWorker from './serviceWorker';\n\nimport \"./components/template.scss\" \n// import 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n    <Main />,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.register()"],"sourceRoot":""}